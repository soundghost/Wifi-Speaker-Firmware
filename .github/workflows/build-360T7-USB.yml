#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build 360T7 USB

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      USE_MTWIFI_CFG:
        description: 'Use mtwifi-cfg'
        required: true
        default: false
        type: boolean
      CLEAN_CACHE:
        description: '手动清理缓存并强制全新编译'
        required: true
        default: false
        type: boolean
      LAN_IP:
        description: 'Set LAN IP Address'
        required: true
        default: '192.168.1.1'

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  ENV_SH: scripts/environment.sh
  DIY_SH1: scripts/diy1.sh
  DIY_SH2: scripts/diy2.sh
  #CLASH_CORE: scripts/preset-clash-core.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  DEVICE_NAME: 360T7 USB
  CCACHE_DIR: ~/.ccache
  CCACHE_MAXSIZE: 2G

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查项目文件
      uses: actions/checkout@v4

    - name: 设置环境变量
      run: |
        echo "USE_MTWIFI_CFG=${{ github.event.inputs.USE_MTWIFI_CFG }}" >> $GITHUB_ENV
        echo "USE_NX30PRO_EEPROM=${{ github.event.inputs.USE_NX30PRO_EEPROM }}" >> $GITHUB_ENV
        echo "USE_52MHZ=${{ github.event.inputs.USE_52MHZ }}" >> $GITHUB_ENV
        echo "CLEAN_CACHE=${{ github.event.inputs.CLEAN_CACHE }}" >> $GITHUB_ENV



    - name: 释放磁盘空间（系统清理）
      run: |
        echo "🧹 开始清理系统空间..."
        
        # 显示清理前的空间使用情况
        echo "清理前的磁盘使用情况："
        df -hT
        
        # 删除大型软件包和工具链
        echo "🧹 清理dotnet"
        sudo rm -rf /usr/share/dotnet
        echo "🧹 清理anroid"
        sudo rm -rf /usr/local/lib/android
        echo "🧹 清理ghc"
        sudo rm -rf /opt/ghc
        echo "🧹 清理boost"
        sudo rm -rf /usr/local/share/boost
        echo "🧹 清理hostedtoolcache"
        sudo rm -rf /opt/hostedtoolcache
        echo "🧹 清理.ghcup"
        sudo rm -rf /usr/local/.ghcup
        echo "🧹 清理swift"
        sudo rm -rf /usr/share/swift
        
        # 清理包管理器缓存
        sudo apt-get clean
        sudo apt-get autoremove -y --purge
        
        # 清理 Docker（如果存在）
        if command -v docker > /dev/null 2>&1; then
          echo "🧹 清理Docker"
          docker system prune -a -f || true
        fi
        
        # 清理 snap 缓存
        if command -v snap > /dev/null 2>&1; then
          sudo snap list --all | awk '/disabled/{print $1, $3}' | while read snapname revision; do
            echo "🧹 清理 snap 缓存"
            sudo snap remove "$snapname" --revision="$revision" 2>/dev/null || true
          done
        fi
        
        # 清理临时文件
        echo "🧹 清理临时文件tmp"
        sudo rm -rf /tmp/*
        sudo rm -rf /var/tmp/*
        
        echo "✅ 系统空间清理完成"
        echo "清理后的磁盘使用情况："
        df -hT



    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "🔧 初始化编译环境..."
        
        # 设置时区
        sudo timedatectl set-timezone "$TZ"
        
        # 更新软件包列表
        sudo -E apt-get -qq update -y
        
        # 升级系统（可选，根据需要启用）
        # sudo -E apt-get -qq full-upgrade -y
        
        # 执行环境设置脚本
        if [ -f "$ENV_SH" ]; then
          chmod +x $ENV_SH && $ENV_SH
        else
          echo "⚠️ 环境设置脚本 $ENV_SH 不存在，跳过"
        fi
        
        # 创建工作目录
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        

        
        echo "✅ 环境初始化完成"

    - name: 检查空间使用情况
      if: (!cancelled())
      run: |
        echo "📊 当前磁盘使用情况："
        df -hT
        echo ""
        echo "📁 /workdir 目录信息："
        ls -la /workdir/ || echo "目录不存在或为空"

    - name: 克隆源码
      working-directory: /workdir
      run: |
        echo "📥 开始克隆源码..."
        git clone --depth 1 $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        echo "✅ 源码克隆完成"
        
        # 显示源码信息
        cd openwrt
        echo "📋 源码信息:"
        echo "分支: $(git branch --show-current)"
        echo "提交: $(git log --oneline -1)"

    - name: 更新 feeds 并安装依赖
      run: |
        cd openwrt
        
        # 配置 git 用户信息
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
        echo "📦 更新 feeds..."
        ./scripts/feeds update -a
        
        echo "📦 安装 feeds..."
        ./scripts/feeds install -a
        
        # 执行第 1 个自定义脚本
        if [ -f "$GITHUB_WORKSPACE/$DIY_SH1" ]; then
          echo "🔧 执行第 1 个自定义配置脚本..."
          chmod +x $GITHUB_WORKSPACE/$DIY_SH1 && $GITHUB_WORKSPACE/$DIY_SH1
        else
          echo "⚠️ 自定义脚本1 $DIY_SH1 不存在，跳过"
        fi
        # 更新 golang 到 1.25.x 版本
        echo "🔄 更新 golang 到 1.25.x ..."
        rm -rf feeds/packages/lang/golang
        if git clone https://github.com/sbwml/packages_lang_golang -b 25.x feeds/packages/lang/golang; then
          echo "✅ golang 更新成功"
        else
          echo "⚠️ golang 更新失败，即将退出程序"
          exit 1
        fi
        # 更新 xray-core Makefile
        echo "🔄 更新 xray-core Makefile..."
        if curl -sSL https://raw.githubusercontent.com/immortalwrt/packages/refs/heads/master/net/xray-core/Makefile -o package/feeds/packages/xray-core/Makefile; then
          echo "✅ xray-core Makefile 更新成功"
        else
          echo "⚠️ xray-core Makefile 更新失败，继续使用原版本"
        fi
        # 建立snapcast软链接
        echo "建立snapcast软链接"
        if ln -s snapos/openwrt package/snapcast; then
          echo "建立snapcast软链接成功"
        else
          echo "建立snapcast软链接失败，流程将终止"
          exit 1
        fi
        
        # 执行第 2 个自定义脚本
        if [ -f "$GITHUB_WORKSPACE/$DIY_SH2" ]; then
          echo "🔧 执行第 2 个自定义配置脚本..."
          chmod +x $GITHUB_WORKSPACE/$DIY_SH2 && $GITHUB_WORKSPACE/$DIY_SH2
        else
          echo "⚠️ 自定义脚本2 $DIY_SH2 不存在，跳过"
        fi

    - name: 导入补丁和基础配置
      run: |
        echo "⚙️ 导入配置文件..."
        
        # 复制自定义文件
        if [ -d "files" ]; then
          echo "📁 复制自定义文件..."
          mv files openwrt/files
        fi
        
        # 导入基础配置
        if [ -f "configs/360T7-USB.config" ]; then
          echo "📋 导入基础配置..."
          cat configs/360T7-USB.config >> openwrt/.config
        else
          echo "❌ 基础配置文件不存在: configs/360T7-USB.config"
          exit 1
        fi

    - name: 配置无线控制界面
      if: env.USE_MTWIFI_CFG == 'true'
      run: |
        echo "📡 配置使用 mtwifi-cfg 无线控制界面..."
        cd openwrt
        
        # 备份原配置
        cp .config .config.bak
        
        # 替换无线控制配置
        if sed -i '/CONFIG_PACKAGE_luci-app-mtk=y/{N;N;N;s/CONFIG_PACKAGE_luci-app-mtk=y\nCONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y\nCONFIG_PACKAGE_wifi-profile=y\nCONFIG_WIFI_NORMAL_SETTING=y/CONFIG_PACKAGE_lua-cjson=y\nCONFIG_PACKAGE_luci-app-mtwifi-cfg=y\nCONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y\nCONFIG_PACKAGE_mtwifi-cfg=y/}' .config; then
          echo "✅ 无线控制界面配置完成"
        else
          echo "⚠️ 无线控制界面配置可能失败，检查配置..."
          diff .config.bak .config || true
        fi

    - name: 配置第三方 eeprom
      if: env.USE_NX30PRO_EEPROM == 'true'
      run: |
        echo "📡 配置使用 nx30pro eeprom..."
        cd openwrt
        
        # 创建固件目录
        target_dir="target/linux/mediatek/mt7981/base-files/lib/firmware"
        mkdir -p "$target_dir"
        
        # 复制 eeprom 文件
        if [ -f "$GITHUB_WORKSPACE/eeprom/nx30pro_eeprom.bin" ]; then
          cp "$GITHUB_WORKSPACE/eeprom/nx30pro_eeprom.bin" "$target_dir/MT7981_iPAiLNA_EEPROM.bin"
          echo "✅ nx30pro eeprom 文件复制成功"
        else
          echo "❌ nx30pro eeprom 文件不存在: eeprom/nx30pro_eeprom.bin"
          exit 1
        fi
        
        # 修改相关配置文件
        preinit_file="target/linux/mediatek/mt7981/base-files/lib/preinit/90_extract_caldata"
        if [ -f "$preinit_file" ]; then
          sed -i 's/caldata_extract_mmc/# caldata_extract_mmc/' "$preinit_file"
          echo "✅ preinit 脚本修改完成"
        fi
        
        makefile_path="package/mtk/drivers/mt_wifi/Makefile"
        if [ -f "$makefile_path" ]; then
          sed -i 's#./files/mt7981-default-eeprom/MT7981_iPAiLNA_EEPROM.bin##' "$makefile_path"
          echo "✅ WiFi 驱动 Makefile 修改完成"
        fi

    - name: 配置闪存频率
      if: env.USE_52MHZ == 'true'
      run: |
        echo "⚡ 配置使用 52MHz 闪存频率..."
        cd openwrt
        
        dts_file="target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts"
        
        if [ -f "$dts_file" ]; then
          # 添加高速模式配置
          sed -i -e '/bus-width = <8>;/ a\	cap-mmc-highspeed;' "$dts_file"
          
          # 修改频率设置
          sed -i 's/26000000/52000000/g' "$dts_file"
          
          echo "✅ 闪存频率配置完成"
          echo "当前 max-frequency 配置:"
          grep max-frequency "$dts_file" || echo "未找到 max-frequency 配置"
        else
          echo "❌ DTS 文件不存在: $dts_file"
          exit 1
        fi

    - name: 设置LAN IP地址（路由器登录地址）
      run: |
        cd openwrt
        SET_IP=${{ github.event.inputs.LAN_IP }}
        if [[ $SET_IP =~ ^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; then
            #修改lan关联IP
            sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" $(find feeds/luci/modules/luci-mod-system -type f -name "flash.js")
            #修改默认IP地址
            sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" package/base-files/files/bin/config_generate
            echo "设置 LAN 口 IP 地址为 $SET_IP 成功！"
        else
            echo "无效 IP 地址, 将使用默认地址。"
        fi
    - name: 下载依赖
      run: |
        cd openwrt
        
        # 生成默认配置
        echo "⚙️ 生成默认配置..."
        make defconfig
        
        # 下载编译依赖
        echo "📥 下载编译依赖包..."
        make download -j$(nproc) V=10
        
        # 清理无效的小文件
        echo "🧹 清理无效下载文件..."
        find dl -size -1024c -exec rm -f {} \;
        
        echo "✅ 依赖下载完成"

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        
        # 显示编译信息
        echo "🔨 开始编译固件..."
        echo "编译线程数: $(($(nproc)+1))"
        echo "CPU 核心数: $(nproc)"
        echo "内存使用情况:"
        free -h
        
        # 记录编译开始时间
        compile_start=$(date '+%Y-%m-%d %H:%M:%S')
        echo "编译开始时间: $compile_start"
        
        # 尝试多线程编译，失败时逐步降级
        compile_success=false
        
        if make -j$(($(nproc)+1)); then
          compile_success=true
          echo "✅ 多线程编译成功"
        elif make -j$(nproc); then
          compile_success=true
          echo "✅ 标准多线程编译成功"
        elif make -j1 V=s; then
          compile_success=true
          echo "✅ 单线程详细编译成功"
        fi
        
        # 记录编译结束时间
        compile_end=$(date '+%Y-%m-%d %H:%M:%S')
        echo "编译结束时间: $compile_end"
        
        # 检查编译结果
        if [ "$compile_success" = "true" ] && [ -d "bin/targets" ]; then
          firmware_count=$(find bin/targets -name "*.bin" -o -name "*.img" | wc -l)
          if [ $firmware_count -gt 0 ]; then
            echo "✅ 编译成功完成，生成了 $firmware_count 个固件文件"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "compile_time=$(date '+%Y.%m.%d_%H:%M:%S')" >> $GITHUB_OUTPUT
          else
            echo "❌ 编译失败：未找到固件文件"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        else
          echo "❌ 编译失败"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: 检查编译后空间使用
      if: (!cancelled())
      run: |
        echo "📊 编译后磁盘使用情况："
        df -hT
        echo ""
        echo "📁 编译输出目录大小："
        if [ -d "openwrt/bin" ]; then
          du -sh openwrt/bin
        fi

    - name: 上传 bin 目录到 Artifacts
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ steps.compile.outputs.compile_time }}
        path: openwrt/bin
        retention-days: 5

    - name: 整理固件文件
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        
        # 删除不需要的文件
        rm -rf *.buildinfo *.json *.manifest packages
        
        # 显示剩余文件
        echo "📁 固件文件列表:"
        ls -la
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到 Artifacts
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ steps.compile.outputs.compile_time }}
        path: ${{ env.FIRMWARE }}
        retention-days: 7

    - name: 生成发布标签和说明
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        echo "🏷️ 生成发布标签..."
        
        # 获取编译完成时间
        compile_time="${{ steps.compile.outputs.compile_time }}"
        
        # 确定WiFi控制界面类型
        wlan_interface="unknown"
        if grep -q 'CONFIG_PACKAGE_mtwifi-cfg=y' openwrt/.config; then
          echo "- 🌐 使用 OpenWrt 原生无线控制界面 (mtwifi-cfg)" >> release.txt
          wlan_interface="mtwifi-cfg"
        elif grep -q 'CONFIG_PACKAGE_luci-app-mtk=y' openwrt/.config; then
          echo "- 🌐 使用 MTK SDK 无线控制界面 (luci-app-mtk)" >> release.txt  
          wlan_interface="luci-app-mtk"
        else
          echo "- ❓ 未知无线控制界面类型" >> release.txt
        fi
        
        # 确定 eeprom 状态
        eeprom_status="default_eeprom"
        if [ -f "openwrt/target/linux/mediatek/mt7981/base-files/lib/firmware/MT7981_iPAiLNA_EEPROM.bin" ]; then
          echo "- 📡 eeprom 使用 H3C NX30 Pro 提取版本" >> release.txt
          eeprom_status="nx30pro_eeprom"
        else
          echo "- 📡 使用默认 eeprom 设置" >> release.txt
        fi
        
        # 获取闪存频率配置
        dts_file="openwrt/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts"
        max_frequency="unknown"
        if [ -f "$dts_file" ]; then
          max_frequency_hz=$(grep -oP "max-frequency = <\K[0-9]*" "$dts_file" | head -1)
          if [ -n "$max_frequency_hz" ] && [ "$max_frequency_hz" -gt 0 ]; then
            max_frequency=$((max_frequency_hz / 1000000))
            echo "- ⚡ 闪存频率: ${max_frequency}MHz" >> release.txt
          else
            echo "- ⚡ 闪存频率: 默认设置" >> release.txt
            max_frequency="default"
          fi
        else
          echo "- ⚡ 闪存频率: 配置文件未找到" >> release.txt
        fi
        
        # 添加编译信息
        echo "" >> release.txt
        echo "## 📋 编译信息" >> release.txt
        echo "- 🕐 编译完成时间: $compile_time" >> release.txt
        echo "- 🖥️ 编译环境: Ubuntu 22.04" >> release.txt
        echo "- 🔧 golang ver:1.25.x | xray-core ver:25.8.3" >> release.txt
        echo "- 📦 包含以下音乐类软件：airconnect | airplay2 | upmpdcli | ympd | pianod | snapcast ( server | client )" >> release.txt
        
        # 添加源码信息
        echo "" >> release.txt
        echo "## 📦 源码信息" >> release.txt
        cd openwrt
        echo "- 📍 仓库: $REPO_URL" >> ../release.txt
        echo "- 🌿 分支: $(git branch --show-current)" >> ../release.txt
        echo "- 📝 提交: $(git log --oneline -1)" >> ../release.txt
        cd ..
        
        # 生成发布标签（按要求格式：编译完成时间 - 固件型号 - WiFi控制方式 - 第三方eeprom）
        release_tag=$(date +"%Y.%m.%d-mt7981-rax3000m-emmc-${wlan_interface}-${eeprom_status}")
        
        # 添加频率信息到标签（如果不是默认值）
        if [ "$max_frequency" != "default" ] && [ "$max_frequency" != "unknown" ]; then
          release_tag="${release_tag}-${max_frequency}MHz"
        fi
        
        echo "🏷️ 发布标签: $release_tag"
        echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布固件到 Release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        draft: false
        prerelease: false

    - name: 清理旧版本发布
      uses: dev-drprasad/delete-older-releases@v0.3.0
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 7
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理过时的工作流运行
      uses: Mattraks/delete-workflow-runs@v2
      if: always()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 3
