#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ImmortalWrt rax3000m emmc

permissions: write-all
# 开启写权限，防止无法上传到release

on:
  workflow_dispatch:
    inputs:
      LAN_IP:
        description: 'Set LAN IP Address'
        required: true
        default: '192.168.1.1'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05

  ENV_SH: scripts/environment.sh
  DIY_SH1: scripts/diy1.sh
  DIY_SH2: scripts/diy2.sh

  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
    - name: 释放磁盘空间（系统清理）
      run: |
        echo "🧹 开始清理系统空间..."
        # 显示清理前的空间使用情况
        echo "清理前的磁盘使用情况："
        df -hT
        # 删除大型软件包和工具链
        echo "清理dotnet"
        sudo rm -rf /usr/share/dotnet
        echo "清理anroid"
        sudo rm -rf /usr/local/lib/android
        echo "清理ghc"
        sudo rm -rf /opt/ghc
        echo "清理boost"
        sudo rm -rf /usr/local/share/boost
        echo "清理hostedtoolcache"
        sudo rm -rf /opt/hostedtoolcache
        echo "清理.ghcup"
        sudo rm -rf /usr/local/.ghcup
        echo "清理swift"
        sudo rm -rf /usr/share/swift
        # 清理包管理器缓存
        sudo apt-get clean
        sudo apt-get autoremove -y --purge
        # 清理 Docker（如果存在）
        if command -v docker > /dev/null 2>&1; then
          echo "清理Docker"
          docker system prune -a -f || true
        fi
        # 清理 snap 缓存
        if command -v snap > /dev/null 2>&1; then
          sudo snap list --all | awk '/disabled/{print $1, $3}' | while read snapname revision; do
            echo "清理 snap 缓存"
            sudo snap remove "$snapname" --revision="$revision" 2>/dev/null || true
          done
        fi
        # 清理临时文件
        echo "清理临时文件tmp"
        sudo rm -rf /tmp/*
        sudo rm -rf /var/tmp/*
        echo "✅ 系统空间清理完成"
        echo "清理后的磁盘使用情况："
        df -hT
        # 更新软件包列表
        sudo -E apt-get -qq update -y
        # 升级系统（可选，根据需要启用）
        # sudo -E apt-get -qq full-upgrade -y
        chmod +x $ENV_SH && $ENV_SH
        sudo timedatectl set-timezone "$TZ"
        # 创建工作目录
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 检查空间使用情况
      if: (!cancelled())
      run: |
        echo "📊 当前磁盘使用情况："
        df -hT
        echo ""
        echo "📁 /workdir 目录信息："
        ls -la /workdir/ || echo "目录不存在或为空"

    - name: 克隆源码
      working-directory: /workdir
      run: |
        echo "📥 开始克隆源码..."
        git clone --depth 1 $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        echo "✅ 源码克隆完成"
        
        # 显示源码信息
        cd openwrt
        echo "📋 源码信息:"
        echo "分支: $(git branch --show-current)"
        echo "提交: $(git log --oneline -1)"

    - name: 更新 feeds 并安装依赖
      run: |
        cd openwrt
        # 配置 git 用户信息
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        echo "📦 更新 feeds..."
        ./scripts/feeds update -a
        echo "📦 安装 feeds..."
        ./scripts/feeds install -a
        # 执行第 1 个自定义脚本
        if [ -f "$GITHUB_WORKSPACE/$DIY_SH1" ]; then
          echo "🔧 执行第 1 个自定义配置脚本..."
          chmod +x $GITHUB_WORKSPACE/$DIY_SH1 && $GITHUB_WORKSPACE/$DIY_SH1
        else
          echo "⚠️ 自定义脚本1 $DIY_SH1 不存在，跳过"
        fi
        # 更新 golang 到 1.25.x 版本
        echo "🔄 更新 golang 到 1.25.x ..."
        rm -rf feeds/packages/lang/golang
        if git clone https://github.com/sbwml/packages_lang_golang -b 25.x feeds/packages/lang/golang; then
          echo "✅ golang 更新成功"
        else
          echo "⚠️ golang 更新失败，即将退出程序"
          exit 1
        fi

        # 更新 xray-core Makefile
        echo "🔄 更新 xray-core Makefile..."
        if curl -sSL https://raw.githubusercontent.com/immortalwrt/packages/refs/heads/master/net/xray-core/Makefile -o package/feeds/packages/xray-core/Makefile; then
          echo "✅ xray-core Makefile 更新成功"
        else
          echo "⚠️ xray-core Makefile 更新失败，继续使用原版本"
        fi

        # 更新 upmpdcli Makefile
        echo "🔄 更新 upmpdcli Makefile..."
        if curl -sSL https://github.com/immortalwrt/packages/raw/refs/heads/master/sound/upmpdcli/Makefile -o feeds/packages/sound/upmpdcli/Makefile; then
          echo "✅ upmpdcli Makefile 更新成功"
        else
          echo "⚠️ upmpdcli Makefile 更新失败，继续使用原版本"
        fi

        # 更新 mpd
        echo "🔄 更新 mpd Makefile..."
        if curl -sSL https://github.com/immortalwrt/packages/raw/refs/heads/master/sound/mpd/Makefile -o feeds/packages/sound/mpd/Makefile; then
          echo "✅ mpd Makefile 更新成功"
        else
          echo "⚠️ mpd Makefile 更新失败，继续使用原版本"
        fi
        if curl -sSL https://github.com/immortalwrt/packages/raw/refs/heads/master/sound/mpd/patches/010-fmt.patch -o feeds/packages/sound/mpd/patches/010-fmt.patch; then
          echo "✅ mpd patches 更新成功"
        else
          echo "⚠️ mpd patches 更新失败，继续使用原版本"
        fi

        # 更新 pianod Makefile
        echo "🔄 更新 pianod Makefile..."
        if curl -sSL https://github.com/immortalwrt/packages/raw/refs/heads/master/sound/pianod/Makefile -o feeds/packages/sound/pianod/Makefile; then
          echo "✅ pianod Makefile 更新成功"
        else
          echo "⚠️ pianod Makefile 更新失败，继续使用原版本"
        fi

        # 更新 mpg123 Makefile
        echo "🔄 更新 mpg123 Makefile..."
        if curl -sSL https://github.com/immortalwrt/packages/raw/refs/heads/master/sound/mpg123/Makefile -o feeds/packages/sound/mpg123/Makefile; then
          echo "✅ mpg123 Makefile 更新成功"
        else
          echo "⚠️ mpg123 Makefile 更新失败，继续使用原版本"
        fi

        # 建立snapcast软链接
        echo "建立snapcast软链接"
        if ln -s snapos/openwrt package/snapcast; then
          echo "建立snapcast软链接成功"
        else
          echo "建立snapcast软链接失败，流程将终止"
          exit 1
        fi
        # 执行第 2 个自定义脚本
        if [ -f "$GITHUB_WORKSPACE/$DIY_SH2" ]; then
          echo "🔧 执行第 2 个自定义配置脚本..."
          chmod +x $GITHUB_WORKSPACE/$DIY_SH2 && $GITHUB_WORKSPACE/$DIY_SH2
        else
          echo "⚠️ 自定义脚本2 $DIY_SH2 不存在，跳过"
        fi
    - name: 导入补丁和基础配置
      run: |
        echo "⚙️ 导入配置文件..."
        # 复制自定义文件
        if [ -d "files" ]; then
          echo "📁 复制自定义文件..."
          mv files openwrt/files
        fi
        # 导入基础配置
        if [ -f "configs/k3.config" ]; then
          echo "📋 导入基础配置..."
          cat configs/k3.config >> openwrt/.config
        else
          echo "❌ 基础配置文件不存在: configs/k3.config"
          exit 1
        fi

    - name: 设置LAN IP地址（路由器登录地址）
      run: |
        cd openwrt
        SET_IP=${{ github.event.inputs.LAN_IP }}
        if [[ $SET_IP =~ ^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; then
            #修改lan关联IP
            sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" $(find feeds/luci/modules/luci-mod-system -type f -name "flash.js")
            #修改默认IP地址
            sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" package/base-files/files/bin/config_generate
            echo "设置 LAN 口 IP 地址为 $SET_IP 成功！"
        else
            echo "无效 IP 地址, 将使用默认地址。"
        fi

    - name: 下载依赖
      run: |
        cd openwrt
       
        # 生成默认配置
        echo "⚙️ 生成默认配置..."
        make defconfig
        # 下载编译依赖
        echo "📥 下载编译依赖包..."
        make download -j$(nproc) V=10
        
        # 清理无效的小文件
        echo "🧹 清理无效下载文件..."
        find dl -size -1024c -exec rm -f {} \;
        echo "✅ 依赖下载完成"

    - name: 编译固件中
      id: compile
      run: |
        cd openwrt
        # 显示编译信息
        echo "🔨 开始编译固件..."
        echo "编译线程数: $(($(nproc)+1))"
        echo "CPU 核心数: $(nproc)"
        echo "内存使用情况:"
        free -h
        # 尝试多线程编译，失败时逐步降级
        compile_success=false
        if make -j$(($(nproc)+1)); then
          compile_success=true
          echo "✅ 多线程编译成功"
        elif make -j$(nproc); then
          compile_success=true
          echo "✅ 标准多线程编译成功"
        elif make -j1 V=s; then
          compile_success=true
          echo "✅ 单线程详细编译成功"
        fi
        # 记录编译结束时间
        compile_end=$(date '+%Y-%m-%d %H:%M:%S')
        echo "编译结束时间: $compile_end"
        # 检查编译结果
        if [ "$compile_success" = "true" ] && [ -d "bin/targets" ]; then
          firmware_count=$(find bin/targets -name "*.bin" -o -name "*.img" | wc -l)
          if [ $firmware_count -gt 0 ]; then
            echo "✅ 编译成功完成，生成了 $firmware_count 个固件文件"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "compile_time=$(date '+%Y.%m.%d_%H:%M:%S')" >> $GITHUB_OUTPUT
          else
            echo "❌ 编译失败：未找到固件文件"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        else
          echo "❌ 编译失败"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: 检查编译后空间使用
      if: (!cancelled())
      run: |
        echo "📊 编译后磁盘使用情况："
        df -hT
        echo ""
        echo "📁 编译输出目录大小："
        if [ -d "openwrt/bin" ]; then
          du -sh openwrt/bin
        fi

    - name: 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *.buildinfo 
        rm -rf *.json 
        rm -rf *.manifest 
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        echo -e "### immortalwrt-23.05-wifi-speaker--phicomm-k3" >> release.txt

        release_tag=$(date +"%Y.%m.%d-23.05-wifi-speaker-phicomm-K3")
        echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧发布的固件
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 7
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 删除过时工作流程
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 3
